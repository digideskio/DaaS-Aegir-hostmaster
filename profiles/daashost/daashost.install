<?php

/**
 * Implement hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function daashost_install() {
  
  variable_set('install_profile', 'daashost');
  
  // add support for nginx
  if (d()->platform->server->http_service_type === 'nginx') {
    module_enable(array(
      'hosting_nginx'
    ));
  }
  
  // Bootstrap and create all the initial nodes
  daashost_bootstrap();
  
  // Finalize and setup themes, optional modules etc
  daashost_task_finalize();
}

/**
 * Bootstraping function.
 *
 * This function creates the daashost platform, package and the Aegir master
 * site nodes.
 */
function daashost_bootstrap() {
  /* Default node types and default node */
  $types = node_types_rebuild();
  
  // Initialize the hosting defines
  hosting_init();
  
  /* Default client */
  $node = new stdClass();
  $node->uid = 1;
  $node->type = 'client';
  $node->title = drush_get_option('client_name', 'admin');
  $node->status = 1;
  node_save($node);
  variable_set('hosting_default_client', $node->nid);
  variable_set('hosting_admin_client', $node->nid);
  
  $client_id = $node->nid;
  
  /* Default server */
  $node = new stdClass();
  $node->uid = 1;
  $node->type = 'server';
  $node->title = php_uname('n');
  $node->status = 1;
  $node->hosting_name = 'server_master';
  $node->services = array();
  
  /* Make it compatible with more than apache and nginx */
  $master_server = d()->platform->server;
  hosting_services_add($node, 'http', $master_server->http_service_type, array(
    'restart_cmd' => $master_server->http_restart_cmd, 
    'port' => 80, 
    'available' => 1
  ));
  
  /* examine the db server associated with the daashost site */
  $db_server = d()->db_server;
  $master_db = parse_url($db_server->master_db);
  /*
   * if it's not the same server as the master server, create a new node for it
   */
  if ($db_server->remote_host == $master_server->remote_host) {
    $db_node = $node;
  }
  else {
    $db_node = new stdClass();
    $db_node->uid = 1;
    $db_node->type = 'server';
    $db_node->title = $master_db['host'];
    $db_node->status = 1;
    $db_node->hosting_name = 'server_' . $db_server->remote_host;
    $db_node->services = array();
  }
  hosting_services_add($db_node, 'db', $db_server->db_service_type, array(
    'db_type' => $master_db['scheme'], 
    'db_user' => urldecode($master_db['user']), 
    'db_passwd' => isset($master_db['pass']) ? urldecode($master_db['pass']) : '', 
    'port' => 3306, 
    'available' => 1
  ));
  
  drupal_set_message(st('Creating master server node'));
  node_save($node);
  if ($db_server->remote_host != $master_server->remote_host) {
    drupal_set_message(st('Creating db server node'));
    node_save($db_node);
  }
  variable_set('hosting_default_web_server', $node->nid);
  variable_set('hosting_own_web_server', $node->nid);
  
  variable_set('hosting_default_db_server', $db_node->nid);
  variable_set('hosting_own_db_server', $db_node->nid);
  
  // Create the daashost platform & packages
  $node = new stdClass();
  $node->uid = 1;
  $node->title = 'Drupal';
  $node->type = 'package';
  $node->package_type = 'platform';
  $node->short_name = 'drupal';
  $node->old_short_name = 'drupal';
  $node->description = 'Drupal code-base.';
  $node->status = 1;
  node_save($node);
  $package_id = $node->nid;
  
  $node = new stdClass();
  $node->uid = 1;
  $node->type = 'platform';
  $node->title = 'daashost';
  $node->publish_path = d()->root;
  $node->makefile = '';
  $node->verified = 1;
  $node->web_server = variable_get('hosting_default_web_server', 2);
  $node->platform_status = 1;
  $node->status = 1;
  $node->make_working_copy = 0;
  node_save($node);
  $platform_id = $node->nid;
  variable_set('hosting_own_platform', $node->nid);
  
  $instance = new stdClass();
  $instance->rid = $node->nid;
  $instance->version = VERSION;
  $instance->filename = '';
  $instance->version_code = 1;
  $instance->schema_version = 0;
  $instance->package_id = $package_id;
  $instance->status = 0;
  $instance->platform = $platform_id;
  hosting_package_instance_save($instance);
  
  // Create the daashost profile package node
  $node = new stdClass();
  $node->uid = 1;
  $node->title = 'daashost';
  $node->type = 'package';
  $node->old_short_name = 'daashost';
  $node->description = 'The Daashost profile.';
  $node->package_type = 'profile';
  $node->short_name = 'daashost';
  $node->status = 1;
  node_save($node);
  $profile_id = $node->nid;
  
  $instance = new stdClass();
  $instance->rid = $node->nid;
  $instance->version = VERSION;
  $instance->filename = '';
  $instance->version_code = 1;
  $instance->schema_version = 0;
  $instance->package_id = $profile_id;
  $instance->status = 0;
  $instance->platform = $platform_id;
  hosting_package_instance_save($instance);
  
  // Create the main Aegir site node
  $node = new stdClass();
  $node->uid = 1;
  $node->type = 'site';
  $node->title = d()->uri;
  $node->platform = $platform_id;
  $node->client = $client_id;
  $node->db_name = '';
  $node->db_server = $db_node->nid;
  $node->profile = $profile_id;
  $node->import = true;
  $node->hosting_name = 'daashost';
  $node->site_status = 1;
  $node->verified = 1;
  $node->status = 1;
  node_save($node);
  
  // Enable the hosting features of modules that we enable by default.
  // The module will already be enabled,
  // this makes sure we also set the default permissions.
  $default_hosting_features = array(
    'hosting_web_server' => 'web_server', 
    'hosting_db_server' => 'db_server', 
    'hosting_platform' => 'platform', 
    'hosting_client' => 'client', 
    'hosting_task' => 'task', 
    'hosting_server' => 'server', 
    'hosting_package' => 'package', 
    'hosting_site' => 'site', 
    'hosting' => 'hosting'
  );
  hosting_features_enable($default_hosting_features, $rebuild = TRUE, $enable = FALSE);
  
  variable_set('site_frontpage', 'hosting/sites');
  
  // do not allow user registration: the signup form will do that
  variable_set('user_register', 0);
  
  // This is saved because the config generation script is running via drush,
  // and does not have access to this value
  variable_set('install_url', $GLOBALS['base_url']);
}

/**
 * Function for setting up the default theme and menu options.
 */
function daashost_task_finalize() {
  variable_set('install_profile', 'daashost');
  
  // Enable daas, and set is as default theme
  theme_enable(array(
    'daas'
  ));
  variable_set('theme_default', 'daas');
  
  // Disable the default Bartik theme
  theme_disable(array(
    'bartik'
  ));
  
  drupal_set_message(st('Configuring default blocks'));
  daashost_place_blocks('daas');
  
  // Save "menu_options" for our content types, so they don't offer to be put in
  // menus.
  variable_set('menu_options_client', array());
  variable_set('menu_options_platform', array());
  variable_set('menu_options_server', array());
  variable_set('menu_options_site', array());
}

/**
 * Helper function to place blocks.
 *
 * @param string $theme
 *        theme name.
 */
function daashost_place_blocks($theme) {
  $blocks = array(
    array(
      'module' => 'hosting', 
      'delta' => 'hosting_queues', 
      'theme' => $theme, 
      'status' => 1, 
      'weight' => -2, 
      'region' => -1, 
      'visibility' => 0, 
      'pages' => '', 
      'title' => '', 
      'cache' => -1
    ), 
    array(
      'module' => 'hosting', 
      'delta' => 'hosting_queues_summary', 
      'theme' => $theme, 
      'status' => 1, 
      'weight' => -2, 
      'region' => -1, 
      'visibility' => 0, 
      'pages' => '', 
      'title' => '', 
      'cache' => -1
    ), 
    array(
      'module' => 'hosting', 
      'delta' => 'hosting_supporting_aegir', 
      'theme' => $theme, 
      'status' => 1, 
      'weight' => -2, 
      'region' => -1, 
      'visibility' => 0, 
      'pages' => '', 
      'title' => '', 
      'cache' => -1
    ), 
    array(
      'module' => 'hosting', 
      'delta' => 'hosting_summary', 
      'theme' => $theme, 
      'status' => 1, 
      'weight' => -2, 
      'region' => -1, 
      'visibility' => 0, 
      'pages' => '', 
      'title' => '', 
      'cache' => -1
    ), 
    array(
      'module' => 'system', 
      'delta' => 'main-menu', 
      'theme' => $theme, 
      'status' => 1, 
      'weight' => 0, 
      'region' => 'sidebar_first', 
      'visibility' => 0, 
      'pages' => '', 
      'title' => '<none>', 
      'cache' => -1
    ), 
    array(
      'module' => 'views', 
      'delta' => 'hosting_task_list-block', 
      'theme' => $theme, 
      'status' => 1, 
      'weight' => -2, 
      'region' => 'sidebar_second', 
      'visibility' => 0, 
      'pages' => '', 
      'title' => '', 
      'cache' => -1
    )
  );
  
  $query = db_insert('block')->fields(array(
    'module', 
    'delta', 
    'theme', 
    'status', 
    'weight', 
    'region', 
    'visibility', 
    'pages', 
    'title', 
    'cache'
  ));
  
  foreach ($blocks as $block) {
    $query->values($block);
  }
  $query->execute();
}
